import discord
from discord.ext import commands
import os
import time
import requests
import io
import base64
from dotenv import load_dotenv
import logging

# C·∫•u h√¨nh logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# T·∫£i bi·∫øn m√¥i tr∆∞·ªùng
load_dotenv()
DISCORD_TOKEN = os.getenv("DISCORD_TOKEN")
VIETQR_CLIENT_ID = os.getenv("VIETQR_CLIENT_ID")
VIETQR_API_KEY = os.getenv("VIETQR_API_KEY")
BANK_ACCOUNT = os.getenv("BANK_ACCOUNT")
BANK_CODE = os.getenv("BANK_CODE")
ACCOUNT_NAME = os.getenv("ACCOUNT_NAME")

# Ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng
if not DISCORD_TOKEN:
    logger.error("Thi·∫øu DISCORD_TOKEN. Vui l√≤ng ki·ªÉm tra bi·∫øn m√¥i tr∆∞·ªùng.")
    exit(1)
if not all([VIETQR_CLIENT_ID, VIETQR_API_KEY, BANK_ACCOUNT, BANK_CODE, ACCOUNT_NAME]):
    logger.warning("Thi·∫øu bi·∫øn m√¥i tr∆∞·ªùng VietQR. L·ªánh /noidung s·∫Ω kh√¥ng ho·∫°t ƒë·ªông.")

# C·∫•u h√¨nh intents
intents = discord.Intents.default()
intents.message_content = True
intents.guilds = True
intents.voice_states = True
intents.messages = True

# Kh·ªüi t·∫°o bot
bot = commands.Bot(command_prefix='!', intents=intents)

# H√†ng ƒë·ª£i ph√°t nh·∫°c (t·∫°m th·ªùi v√¥ hi·ªáu ƒë·ªÉ tr√°nh l·ªói FFmpeg)
queue = {}

# S·ª± ki·ªán bot s·∫µn s√†ng
@bot.event
async def on_ready():
    print(f'Bot ƒë√£ s·∫µn s√†ng: {bot.user} v√†o l√∫c {time.strftime("%H:%M:%S", time.localtime())}')
    try:
        synced = await bot.tree.sync()
        print(f"ƒê·ªìng b·ªô {len(synced)} l·ªánh Slash.")
    except Exception as e:
        print(f"L·ªói khi ƒë·ªìng b·ªô l·ªánh Slash: {e}")

# --- Ch·ª©c nƒÉng hi·ªÉn th·ªã th√¥ng tin ng√¢n h√†ng ---

@bot.command(name='bank')
async def bank(ctx):
    file_path = 'qr_image.jpg'
    if not os.path.exists(file_path):
        await ctx.send(f"L·ªói: Kh√¥ng t√¨m th·∫•y file QR t·∫°i {file_path}. Vui l√≤ng upload file qr_image.jpg.")
        return

    try:
        file = discord.File(file_path)
        embed = discord.Embed(title="üí∏ Th√¥ng tin t√†i kho·∫£n", color=discord.Color.green())
        embed.add_field(name="T√™n t√†i kho·∫£n", value="**NGO THANH NHAN**", inline=False)
        embed.add_field(name="S·ªë t√†i kho·∫£n", value="**35620089999**", inline=False)
        embed.add_field(name="Ng√¢n h√†ng", value="**MB Bank**", inline=False)
        embed.set_image(url=f"attachment://qr_image.jpg")
        await ctx.send(embed=embed, file=file)
    except Exception as e:
        await ctx.send(f"L·ªói khi g·ª≠i ·∫£nh: {str(e)}")

# --- Ch·ª©c nƒÉng t·∫°o m√£ QR chuy·ªÉn kho·∫£n ---

@bot.tree.command(name="noidung", description="T·∫°o m√£ QR chuy·ªÉn kho·∫£n v·ªõi s·ªë ti·ªÅn v√† n·ªôi dung")
@app_commands.describe(amount="S·ªë ti·ªÅn chuy·ªÉn kho·∫£n (VND)", content="N·ªôi dung chuy·ªÉn kho·∫£n")
@app_commands.checks.cooldown(1, 60)
async def noidung(interaction: discord.Interaction, amount: float, content: str):
    await interaction.response.defer()
    try:
        if not all([VIETQR_CLIENT_ID, VIETQR_API_KEY, BANK_ACCOUNT, BANK_CODE, ACCOUNT_NAME]):
            await interaction.followup.send("L·ªói: Thi·∫øu th√¥ng tin API VietQR.")
            return

        if amount <= 0:
            await interaction.followup.send("S·ªë ti·ªÅn ph·∫£i l·ªõn h∆°n 0.")
            return
        if amount > 100000000:
            await interaction.followup.send("S·ªë ti·ªÅn qu√° l·ªõn. T·ªëi ƒëa 100,000,000 VND.")
            return
        if len(content) > 100:
            await interaction.followup.send("N·ªôi dung qu√° d√†i (t·ªëi ƒëa 100 k√Ω t·ª±).")
            return
        if not content.isascii():
            await interaction.followup.send("N·ªôi dung kh√¥ng ƒë∆∞·ª£c ch·ª©a k√Ω t·ª± ti·∫øng Vi·ªát ho·∫∑c ƒë·∫∑c bi·ªát.")
            return

        payload = {
            "accountNo": BANK_ACCOUNT,
            "acqId": BANK_CODE,
            "accountName": ACCOUNT_NAME,
            "amount": int(amount),
            "addInfo": content,
            "template": "compact"
        }
        logger.info(f"G·ª≠i payload t·ªõi VietQR: {payload}")

        vietqr_url = "https://api.vietqr.io/v2/generate"
        headers = {
            "x-client-id": VIETQR_CLIENT_ID,
            "x-api-key": VIETQR_API_KEY,
            "Content-Type": "application/json"
        }
        response = requests.post(vietqr_url, json=payload, headers=headers)

        if response.status_code != 200:
            error_msg = f"L·ªói: Kh√¥ng th·ªÉ t·∫°o m√£ QR. M√£ l·ªói: {response.status_code}"
            logger.error(f"Y√™u c·∫ßu VietQR th·∫•t b·∫°i. Status: {response.status_code}, Response: {response.text}")
            await interaction.followup.send(error_msg[:1990] + "..." if len(error_msg) > 1990 else error_msg)
            return

        qr_data = response.json()
        qr_url = qr_data.get("data", {}).get("qrDataURL")
        if not qr_url or qr_url == "None":
            error_desc = qr_data.get("desc", "Kh√¥ng c√≥ th√¥ng tin l·ªói")
            error_msg = f"L·ªói: Kh√¥ng th·ªÉ t·∫°o m√£ QR. L√Ω do: {error_desc}"
            logger.error(f"Kh√¥ng t√¨m th·∫•y qrDataURL. Ph·∫£n h·ªìi: {qr_data}")
            await interaction.followup.send(error_msg[:1990] + "..." if len(error_msg) > 1990 else error_msg)
            return

        if qr_url.startswith("data:image/png;base64,"):
            base64_data = qr_url.split("data:image/png;base64,")[1]
            qr_image_data = base64.b64decode(base64_data)
            qr_file = discord.File(io.BytesIO(qr_image_data), filename="qrcode.png")
        else:
            qr_image_response = requests.get(qr_url)
            if qr_image_response.status_code != 200:
                logger.error(f"T·∫£i h√¨nh ·∫£nh QR th·∫•t b·∫°i. Status: {qr_image_response.status_code}")
                await interaction.followup.send("L·ªói: Kh√¥ng th·ªÉ t·∫£i h√¨nh ·∫£nh QR.")
                return
            qr_file = discord.File(io.BytesIO(qr_image_response.content), filename="qrcode.png")

        embed = discord.Embed(title="M√£ QR Chuy·ªÉn Kho·∫£n", color=discord.Color.green())
        embed.add_field(name="S·ªë ti·ªÅn", value=f"{amount:,.0f} VND", inline=False)
        embed.add_field(name="N·ªôi dung", value=content, inline=False)
        embed.add_field(name="S·ªë t√†i kho·∫£n", value=BANK_ACCOUNT, inline=False)
        embed.add_field(name="Ng√¢n h√†ng", value=BANK_CODE, inline=False)
        embed.set_image(url="attachment://qrcode.png")

        await interaction.followup.send(embed=embed, file=qr_file)
    except Exception as e:
        error_msg = f"L·ªói: {str(e)}"
        logger.error(f"L·ªói kh√¥ng mong mu·ªën: {str(e)}")
        await interaction.followup.send(error_msg[:1990] + "..." if len(error_msg) > 1990 else error_msg)

# Ch·∫°y bot
try:
    bot.run(DISCORD_TOKEN)
except Exception as e:
    logger.error(f"L·ªói khi ch·∫°y bot: {str(e)}")
    exit(1)